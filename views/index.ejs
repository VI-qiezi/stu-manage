<!DOCTYPE html>
<html>

<head>
  <title>
    <%= title %>
  </title>
  <!-- Bootstrap -->
  <link href="/javascripts/bootstrap-3.3.7-dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel='stylesheet' href='/stylesheets/style.css' />
  <!-- HTML5 shim 和 Respond.js 是为了让 IE8 支持 HTML5 元素和媒体查询（media queries）功能 -->
  <!-- 警告：通过 file:// 协议（就是直接将 html 页面拖拽到浏览器中）访问页面时 Respond.js 不起作用 -->
  <!--[if lt IE 9]-->
  <!--[if lt IE 9]>
      <script src="/javascripts/html5shiv.min.js"></script>
      <script src="/javascripts/respond.min.js"></script>
    <![endif]-->
</head>

<body>
  <h1>
    <%= title %>
  </h1>
  <p>Welcome to
    <%= title %>
  </p>
  <!-- <form action="/logout" method="POST">
      <button id="btnLogout" type="submit">注销</button>
    </form> -->

  <!-- type="button",按回车键时按钮不会自动跳转，而type="submit"，按回车键时按钮会自动跳转 -->
  <button id="btnLogout" type="button">注销</button>


  <!-- Modal -->
  <div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
          <h4 class="modal-title" id="myModalLabel">提示</h4>
        </div>
        <div class="modal-body">

        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-primary" data-dismiss="modal">确定
          </button>
        </div>
      </div>
    </div>
  </div>
  <!-- jQuery (Bootstrap 的所有 JavaScript 插件都依赖 jQuery，所以必须放在前边) -->
  <script src="/javascripts/jquery.min.js"></script>
  <!-- 加载 Bootstrap 的所有 JavaScript 插件。你也可以根据需要只加载单个插件。 -->
  <script src="/javascripts/bootstrap-3.3.7-dist/js/bootstrap.min.js"></script>

  <script>
    $(function () {
      $("#btnLogout").on("click", function () {
        // $.ajax方法时jquery校本库进行ajax请求最底层的一个方法，像get(),post(),getJSON(),getScript()等方法都是在此方法上做了进一步的封装，让用户在使用这些封装方法时更方便，更简单，编写的代码更少。
        // $.ajax()又是对原生js对象XmlHttpRequest()对象的进一步封装。
        // 请求方式常用的四种：
        // get(查询)
        // post(添加)
        // put(编辑)
        // delete(删除)
        // 符合这四种风格称为"RESTful"

        // jquery脚本库并没有put(),delete(),所以要发起这两种请求时，必须通过设置method: ""使用$.ajax()
        $.ajax({
          method: "post",
          url: "/logout",
          data: {},
          success: function (data) {
            if (data.code != 200) {
              // console.log(data);
              $("#myModal .modal-body").text("注销异常！");
              $("#myModal").modal();
              return;
            }
            location.href = "/login";
          },
          error: function (err) {
            $("#myModal .modal-body").text(err.message);
            $("#myModal").modal();
            return;
          }
        })
      })

      /* 
      // 复习ajax及扩展jquery脚本库。
      // 方式一：使用$.fn.extend()进行扩展。
      // extend扩展，特别注意，自行扩展的属性和方法不能和jquery库中已存在的属性和方法重名。为了防止覆盖jquery脚本库中的属性和方法，一般建议你命名加项目名称或公司名称作为前缀。
      $.fn.extend({
        abcdef: "abcdef",
        abc: function () {
          console.log("abc");
        },
        def: function(){
          console.log("def");
        }
      })

      // 这种扩展的方法必须先选择一个元素，再调用方法，我们肯定想直接使用$.abc()
      $(document).abc();
      $(document).def();

      // 方式二；直接使用$.extend()进行扩展。
      $.extend({
        abcdef: "abcdef",
        abc: function () {
          console.log("abc");
        },
        def: function(){
          console.log("def");
        }
      })
      $.abc();
      $.def(); */
    })
  </script>
</body>

</html>